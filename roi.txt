#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <iostream>
#include <ctype.h>

using namespace cv;
using namespace std;


#define MOVIE 0
#define CAM 1
#define IMAGE 0
#define SPLIT 0
#define MORP  0
#define CONTOUR 1
#define CENTER 1
#define TEXT 1
Mat image;
bool selectObject = false;
int trackObject = 0;
Point origin;
Rect selection;
int gymin = 10, gymax = 256, gCrmin = 30, gCrmax = 256, gCbmin = 1, gCbmax = 256;


/// On mouse event 
static void onMouse(int event, int x, int y, int, void*)
{
	if (selectObject)  // for any mouse motion
	{
		selection.x = MIN(x, origin.x);
		selection.y = MIN(y, origin.y);
		selection.width = std::abs(x - origin.x);
		selection.height = std::abs(y - origin.y);
		selection &= Rect(0, 0, image.cols, image.rows);  /// Bitwise AND  check selectin is within the image coordinate
	}

	switch (event)
	{
	case CV_EVENT_LBUTTONDOWN:
		origin = Point(x, y);
		selection = Rect(x, y, 0, 0);
		selectObject = true;
		cout << origin << endl;
		break;

	case CV_EVENT_LBUTTONUP:
		selectObject = false;
		if (selection.width > 0 && selection.height > 0)
		{
			trackObject = -1;
		}
		break;
	}
}


int main()
{

	Mat YCbCr, hsv, hue, mask, dst, dst_morp, morp_src;

	Mat frame;
	int camNum = 0;

#if MOVIE
	VideoCapture cap;
	VideoCapture capture;
	//capture.open("RoadVideo2.avi");
	//capture.open("soccer1.avi");
	capture.open("dashcam.avi");
	if (!capture.isOpened()){
		cout << " Video not read \n";
		return 1;
	}
	//int rate=capture.get(CV_CAP_PROP_FPS);
	capture.read(frame);
#endif MOVIE

#if CAM
	VideoCapture cap;
	//VideoCapture capture;	
	cap.open(camNum);
	if (!cap.isOpened())
	{
		cout << "***Could not initialize capturing...***\n";
		cout << "Current parameter's value: \n";
		waitKey(0);
	}
	cout << "Camera Read OK \n";
	cap >> frame;  // Read from cam

#endif CAM



	// TrackBar 설정
	namedWindow("Source", 0);
	setMouseCallback("Source", onMouse, 0);
	for (;;)
	{
#if IMAGE
		//image = imread("color_ball.jpg");
		//image = imread("Traffic1.jpg");
		//image = imread("baboon200.jpg");
		image = imread("rgb.png");
#endif IMAGE

#if MOVIE
		if (!capture.read(frame))
			break;
		frame.copyTo(image);
#endif MOVIE

#if CAM
		cap >> frame;  // Read from cam
		if (frame.empty())
			break;
		frame.copyTo(image);
#endif CAM		
		cvtColor(image, YCbCr, CV_BGR2YCrCb);

		/// set dst as the output of InRange

		inRange(YCbCr, Scalar(MIN(gymin, gymax), MIN(gCrmin, gCrmax), MIN(gCbmin, gCbmax)), Scalar(MAX(gymin, gymax), MAX(gCrmin, gCrmax), MAX(gCbmin, gCbmax)), dst);
#if MORP
		/////////////  Morphology   ////////////////
		int n = 3;
		int quit = 0;
		//int element_shape = MORPH_RECT;
		int element_shape = MORPH_ELLIPSE;
		//int element_shape = MORPH_CROSS;     

		morp_src = Mat::zeros(dst.size(), CV_8UC1);
		dst.copyTo(morp_src);
		namedWindow("MORP_Output");
		for (;;){
			Mat element = getStructuringElement(element_shape, Size(n, n));

			char choice = 'r';
			choice = waitKey(0);

			switch (choice)
			{
			case 'e':erode(morp_src, dst_morp, element); break;
			case 'd':dilate(morp_src, dst_morp, element); break;
			case 'o':morphologyEx(morp_src, dst_morp, CV_MOP_OPEN, element); break;
			case 'c':morphologyEx(morp_src, dst_morp, CV_MOP_CLOSE, element); break;
			case 'r': dst.copyTo(dst_morp); break;
			case 13: quit = 1;
				//default:  cout << "press proper key" << endl;  break;
			}

			dst_morp.copyTo(morp_src);
			if (quit == 1){ //press enter to end morp
				break;
			}

			imshow("MORP_Output", dst_morp);
		}
#endif MORP

		namedWindow("InRange", 0);
		imshow("InRange", dst);



		Mat roi(image, selection);

		/// once mouse has selected an area
		if (trackObject < 0)
		{
			trackObject = 1;  /// Terminate the next Analysis loop					

			/// Set ROI by the selection

			Mat roi2;
			cvtColor(roi, roi2, CV_BGR2YCrCb);
			Scalar means, stddev;
			meanStdDev(roi2, means, stddev);
			cout << "channel   " << roi2.channels() << endl;
			cout << " Means=" << means << "\n stddev=" << stddev << endl;;

			// -LAB
			// Change the value in the trackbar according to Mean and STD //
			// Change the value in the trackbar according to Mean and STD //
			gymin = means[0] - stddev[0];
			gCrmin = means[1] - stddev[1];
			gCbmin = means[2] - stddev[2];
			gymax = means[0] + stddev[0];
			gCrmax = means[1] + stddev[1];
			gCbmax = means[2] + stddev[2];
			namedWindow("ROI", 0);
			imshow("ROI", roi);
		}

#if CONTOUR
		if (selectObject && selection.width > 0 && selection.height > 0)  // Left Mouse is being clicked and dragged
		{
			// Mouse Drag을 화면에 보여주기 위함
			Mat res;
			bitwise_not(roi, roi);
		}

		////  Draw Contour   ////
		vector<vector<Point> > contours;
		vector<Vec4i> hierarchy;
		Mat dst2;
		dst.copyTo(dst2);
		findContours(dst2, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

		// iterate through all the top-level contours,
		// draw each connected component with its own random color
		int idx = 0, largestComp = 0;
		double maxArea = 0;

		for (; idx >= 0; idx = hierarchy[idx][0])
		{
			const vector<Point>& c = contours[idx];
			double area = fabs(contourArea(Mat(c))); //contourArea(contours[idx]),
			if (area > maxArea)
			{
				maxArea = area;
				largestComp = idx;
			}
		}

		drawContours(dst2, contours, largestComp, Scalar(255, 0, 255), 2, 8, hierarchy);
		float radius = 0;


		Rect r0 = boundingRect(Mat(contours[largestComp]));

		rectangle(dst2, r0, Scalar(255, 0, 0), 2);
		rectangle(image, r0, Scalar(0, 255, 0), 2);  //Draw rectangle in image

#endif CONTOUR
#if CENTER

		Point center(r0.x + r0.width / 2, r0.y + r0.height / 2);
		circle(image, center, 1, Scalar(255, 0, 0), 5);
		
#endif CENTER
#if TEXT
		string text = format("Center = %d %d", center);
		putText(image, text, center, FONT_HERSHEY_PLAIN, 1.0, CV_RGB(0, 255, 0), 2.0);

#endif TEXT
#if CONTOUR
		/// Draw Dst
		namedWindow("Contour", 0);
		imshow("Contour", dst2);
#endif CONTOUR
		imshow("Source", image);

		// Options
		char c = (char)waitKey(10);
		if (c == 27)
			break;

	} // end of for(;;)
	return 0;

}